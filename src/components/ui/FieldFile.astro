---
import ImageClip from "../../assets/img/clip.svg";
const { name, id, ...props } = Astro.props;
---

<label class="file-control">
  <input 
    class="form-field sr-only" 
    type="file" 
    name={name} 
    aria-describedby={`${id}-details`}
    aria-invalid="false"
    aria-errormessage={`${id}-error`}
    {...props}
  />
  <span class="file-control__label" id={`${id}-details`}>
    <img src={ImageClip.src} loading="lazy" />
    –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª (–º–∞–∫—Å–∏–º—É–º 16 –ú–±)
  </span>
</label>
<span class="form-field__error" id={`${id}-error`} data-field-error></span>

<script>
  const inputFiles = document.querySelectorAll("input[type='file']");

  [...inputFiles].forEach((item) => {
    const errorElement = item.parentNode?.parentNode?.querySelector('[data-field-error]');

    item?.addEventListener("change", (event) => {
      const oneMB = 1048576;
      const file = event.target?.files?.[0];
      const fileSize = file?.size;

      if (errorElement) {
        if (fileSize > 16 * oneMB) { 
          errorElement.textContent = `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${Math.round(fileSize / oneMB)}mb)`; 
          item.value = '';
          item.setAttribute('aria-invalid', 'true');
        } else {
          errorElement.textContent = '';
          item.setAttribute('aria-invalid', 'false');
        }
      }

      if(file) {
        item.classList.remove('sr-only');
      } else {
        item.classList.add('sr-only');
      }
    });
  });
</script>

<style>
  @import "/src/assets/css/_custom-media.css";
  @import "/src/assets/css/_form.css";
  
  .file-control {
    
    &:focus-within {
      outline: 1px solid var(--color-gray);
    }

    &:not(:has(.sr-only)) {
      .file-control__label {
        display: none;
      }
    }
  }
  .file-control__label {
    display: flex;
    gap: var(--8px);
    color: var(--color-product);
    cursor: pointer;
    padding-top: var(--30px);

    &:hover {
      background: var(--color-product);
      background: linear-gradient(to right, var(--color-product) 0%, #db7aff 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      cursor: pointer;
    }
  }
  input[type="file"].form-field {
    cursor: pointer;

    &::file-selector-button {
      background-color: transparent;
      color: var(--color-product);
      border: none;
      padding: 0 var(--16px) 0 0;
    }
    &:hover::file-selector-button {
        background: var(--color-product);
        background: linear-gradient(to right, var(--color-product) 30%, #db7aff 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        cursor: pointer;
      }
    &::before {
      content: 'üìé';
      padding-right: var(--4px);
    }
  }

  @media screen and (--screen-phone) {
    .file-control__label {
      padding-top: 0;
      font-size: var(--16px);
      justify-content: center;
      gap: var(--16px);
    }
  }
</style>
